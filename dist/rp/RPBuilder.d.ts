/// <reference types="node" />
import { EventEmitter } from 'events';
import { IPresentationDefinition } from '@sphereon/pex';
import { Hasher } from '@sphereon/ssi-types';
import { VerifyCallback } from '@sphereon/wellknown-dids-client';
import { Signer } from 'did-jwt';
import { Resolvable } from 'did-resolver';
import { PropertyTargets } from '../authorization-request';
import { PresentationVerificationCallback } from '../authorization-response';
import { AuthorizationRequestPayload, CheckLinkedDomain, ClientMetadataOpts, EcdsaSignature, ExternalSignature, InternalSignature, NoSignature, ObjectBy, PassBy, RequestObjectPayload, ResponseIss, ResponseMode, ResponseType, RevocationVerification, RevocationVerificationCallback, SigningAlgo, SuppliedSignature, SupportedVersion } from '../types';
import { RP } from './RP';
import { IRPSessionManager } from './types';
export declare class RPBuilder {
    resolvers: Map<string, Resolvable>;
    customResolver?: Resolvable;
    requestObjectBy: ObjectBy;
    signature: InternalSignature | ExternalSignature | SuppliedSignature | NoSignature;
    checkLinkedDomain?: CheckLinkedDomain;
    wellknownDIDVerifyCallback?: VerifyCallback;
    revocationVerification?: RevocationVerification;
    revocationVerificationCallback?: RevocationVerificationCallback;
    presentationVerificationCallback?: PresentationVerificationCallback;
    supportedVersions: SupportedVersion[];
    eventEmitter?: EventEmitter;
    sessionManager?: IRPSessionManager;
    private _authorizationRequestPayload;
    private _requestObjectPayload;
    clientMetadata?: ClientMetadataOpts;
    clientId: string;
    hasher: Hasher;
    private constructor();
    withScope(scope: string, targets?: PropertyTargets): RPBuilder;
    withResponseType(responseType: ResponseType | ResponseType[] | string, targets?: PropertyTargets): RPBuilder;
    withHasher(hasher: Hasher): RPBuilder;
    withClientId(clientId: string, targets?: PropertyTargets): RPBuilder;
    withIssuer(issuer: ResponseIss, targets?: PropertyTargets): RPBuilder;
    withPresentationVerification(presentationVerificationCallback: PresentationVerificationCallback): RPBuilder;
    withRevocationVerification(mode: RevocationVerification): RPBuilder;
    withRevocationVerificationCallback(callback: RevocationVerificationCallback): RPBuilder;
    withCustomResolver(resolver: Resolvable): RPBuilder;
    addResolver(didMethod: string, resolver: Resolvable): RPBuilder;
    withAuthorizationEndpoint(authorizationEndpoint: string, targets?: PropertyTargets): RPBuilder;
    withCheckLinkedDomain(mode: CheckLinkedDomain): RPBuilder;
    addDidMethod(didMethod: string, opts?: {
        resolveUrl?: string;
        baseUrl?: string;
    }): RPBuilder;
    withRedirectUri(redirectUri: string, targets?: PropertyTargets): RPBuilder;
    withRequestByReference(referenceUri: string): RPBuilder;
    withRequestByValue(): RPBuilder;
    withRequestBy(passBy: PassBy, referenceUri?: string): RPBuilder;
    withResponseMode(responseMode: ResponseMode, targets?: PropertyTargets): RPBuilder;
    withClientMetadata(clientMetadata: ClientMetadataOpts, targets?: PropertyTargets): RPBuilder;
    withSignature(signature: InternalSignature | SuppliedSignature): RPBuilder;
    withInternalSignature(hexPrivateKey: string, did: string, kid: string, alg: SigningAlgo, customJwtSigner?: Signer): RPBuilder;
    withSuppliedSignature(signature: (data: string | Uint8Array) => Promise<EcdsaSignature | string>, did: string, kid: string, alg: SigningAlgo): RPBuilder;
    withPresentationDefinition(definitionOpts: {
        definition: IPresentationDefinition;
        definitionUri?: string;
    }, targets?: PropertyTargets): RPBuilder;
    withWellknownDIDVerifyCallback(wellknownDIDVerifyCallback: VerifyCallback): RPBuilder;
    private initSupportedVersions;
    addSupportedVersion(supportedVersion: SupportedVersion): RPBuilder;
    withSupportedVersions(supportedVersion: SupportedVersion[] | SupportedVersion): RPBuilder;
    withEventEmitter(eventEmitter?: EventEmitter): RPBuilder;
    withSessionManager(sessionManager: IRPSessionManager): RPBuilder;
    getSupportedRequestVersion(requireVersion?: boolean): SupportedVersion | undefined;
    static newInstance(supportedVersion?: SupportedVersion): RPBuilder;
    build(): RP;
    get authorizationRequestPayload(): Partial<AuthorizationRequestPayload>;
    get requestObjectPayload(): Partial<RequestObjectPayload>;
}
